<#  
    .Synopsis  
    Copy or clone source user's member of group to another user, Copy group membership from one user to another in Active Directory.
    .Description  
    Run this script on domain controller, or install RSAT tool on your client machine. This will copy existing given users group to other give group. It validates and verify whether Source and Destination users exists or you have access.
    .Example  
    .\Copy-AdGroupMemberShip.ps1 -SourceUserGroup Administrator -DestinationUsers user1, user2, user3
        
    It takes provided Source user, note down which groups it is member of. Add same groups in the member of tabs of users list provided in parameter DestinationUsers.
    .Example
    .\Copy-AdGroupMemberShip.ps1 -SourceUser Administrator -DestinationUsers (Get-Content C:\Userlist.txt)

    Users list can be provided into text file.
    .Example
    user1, user2, user3 | .\Copy-AdGroupMemberShip.ps1 -SourceUser Administrator

    .Notes
    NAME: Copy-AdGroupMemberShipGuiv2
    AUTHOR: Kunal Udapi
    CREATIONDATE: 5 February 2019
    LASTEDIT: 6 February 2019
    KEYWORDS: Copy or clone source user's member of group to another user.
    .Link  
    #Check Online version: http://kunaludapi.blogspot.com
    #Check Online version: http://vcloud-lab.com
    #Requires -Version 3.0  
    #>  
    ########################################################################  
    # Generated On: 5 February 2019  
    # Generated By: vCloud-lab.com  
    # Tested On: Windows 10  
    # For any question drop an question
    ########################################################################  

    #requires -Version 3 

    #Load required libraries
    Add-Type -AssemblyName PresentationFramework, PresentationCore, WindowsBase, System.Windows.Forms, System.Drawing, System.Windows.Forms

    $ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
    $AssemblyLocation = Join-Path -Path $ScriptPath -ChildPath .\themes
    foreach ($Assembly in (Get-ChildItem $AssemblyLocation -Filter *.dll)) {
        [System.Reflection.Assembly]::LoadFrom($Assembly.fullName) | out-null
    }

    function Show-MessageBox {   
        param (   
        [string]$Message = "Show user friendly Text Message",   
        [string]$Title = 'Title here',   
        [ValidateRange(0,5)]   
        [Int]$Button = 0,   
        [ValidateSet('None','Hand','Error','Stop','Question','Exclamation','Warning','Asterisk','Information')]   
        [string]$Icon = 'Error'   
        )   
        #Note: $Button is equl to [System.Enum]::GetNames([System.Windows.Forms.MessageBoxButtons])   
        #Note: $Icon is equl to [System.Enum]::GetNames([System.Windows.Forms.MessageBoxIcon])   
        $MessageIcon = [System.Windows.Forms.MessageBoxIcon]::$Icon   
        [System.Windows.Forms.MessageBox]::Show($Message,$Title,$Button,$MessageIcon)   
    }  

    Function Confirm-AD {  
        $AllModules = Get-Module -ListAvailable ActiveDirectory  
        if (!$AllModules) {  
            Show-MessageBox -Message 'Install RSAT tool or AD Management tools' -Title 'Missing Ad tools' -Icon Error | Out-Null
        }
        else {
        Import-Module ActiveDirectory
        }
        $progressBar.Value = 10
    }

    function Show-FileBrowser {
        $openFileBrowser = New-Object System.Windows.Forms.OpenFileDialog
        $openFileBrowser.Title = 'Open txt file with users list'
        $openFileBrowser.InitialDirectory = 'C:\' #[Environment]::GetFolderPath('SystemDrive') 
        #$openFileBrowser.CheckFileExists = $true
        $openFileBrowser.CheckPathExists = $true
        $openFileBrowser.Filter =  "Text files (*.txt)|*.txt|All files (*.*)|*.*" #'Documents (*.docx)|*.docx|SpreadSheet (*.xlsx)|*.xlsx'
        $null = $OpenFileBrowser.ShowDialog()
        
        $openFileBrowser.FileName
        $progressBar.Value = 20
    }

[xml]$xaml = @"
<Controls:MetroWindow  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:WpfApp2"
    xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"

    Title="Window1" Height="454.944" Width="382.998">
        
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
            <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
            <!-- Accent and AppTheme setting -->
            <!--“Red”, “Green”, “Blue”, “Purple”, “Orange”, “Lime”, “Emerald”, “Teal”, “Cyan”, “Cobalt”, “Indigo”, “Violet”, “Pink”, “Magenta”, “Crimson”, “Amber”, “Yellow”, “Brown”, “Olive”, “Steel”, “Mauve”, “Taupe”, “Sienna” -->
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Yellow.xaml" />
            <!-- “BaseLight”, “BaseDark” -->
            <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>
    
    <Grid>
        <TabControl x:Name="tabControl" Margin="10,10,0,52" HorizontalAlignment="Left" Width="355">
            <TabItem Header="User Configuration">
                <Grid>
                    <TextBlock x:Name="textBlockSourceUser" HorizontalAlignment="Left" Margin="10,14,0,0" TextWrapping="Wrap" Text="Source user:" VerticalAlignment="Top"/>
                    <TextBox x:Name="textBoxSourceUser" Height="23" Margin="79,10,0,0" TextWrapping="Wrap" Text="Administrator" VerticalAlignment="Top" HorizontalAlignment="Left" Width="145"/>
                    <Button x:Name="buttonSourceGroupList" Content="Get Groups List" HorizontalAlignment="Right" Margin="0,10,8,0" VerticalAlignment="Top" Width="112"/>
                    <ListBox x:Name="listBoxSourceUserGroups" Height="106" Margin="10,42,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Width="214" BorderBrush="Black"/>
                    <TextBlock x:Name="textBlockDestinationUsers" HorizontalAlignment="Left" Margin="10,153,0,0" TextWrapping="Wrap" Text="Destination Users list:" VerticalAlignment="Top"/>
                    <TextBox x:Name="textBoxDestinationUsersList" Margin="10,174,125,10" TextWrapping="Wrap" Text="Load List from txt file or Type user" AcceptsReturn="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto"/>
                    <RadioButton x:Name="radioButtonLoadFromTxt" Content="Load From TXT" HorizontalAlignment="Right" Margin="0,0,16,117" VerticalAlignment="Bottom" IsEnabled="False"/>
                    <RadioButton x:Name="radioButtonTypeUser" Content="Type Users" HorizontalAlignment="Right" Margin="0,0,39,94" VerticalAlignment="Bottom" IsEnabled="False" IsChecked="True"/>
                    <Button x:Name="buttonVerifyUserList" Content="Verify Users in AD" HorizontalAlignment="Right" Margin="0,0,10,10" VerticalAlignment="Bottom" Width="110" IsEnabled="False"/>
                </Grid>
            </TabItem>
            <TabItem Header="Logs">
                <Grid>
                    <TextBox x:Name="textBoxLogs" HorizontalAlignment="Right" Margin="0,10,10,22" TextWrapping="Wrap" Text="Logs" Width="329" IsReadOnly="True" VerticalScrollBarVisibility="Visible"/>
                </Grid>
            </TabItem>
        </TabControl>
        <Button x:Name="buttonCopyMemberGroups" Content="Copy-AdMemberShip" Margin="236,0,10,22" VerticalAlignment="Bottom" Height="23" IsEnabled="False"/>
        <ProgressBar x:Name="progressBar" Height="13" Margin="10,0,0,10" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="196"/>
        <Label x:Name="webSite" Content="http://vcloud-lab.com" HorizontalAlignment="Left" Margin="10,0,0,26" VerticalAlignment="Bottom" Foreground="Blue" ToolTip="http://vcloud-lab.com"/>
    </Grid>
</Controls:MetroWindow>
"@

#Read the form
$Reader = (New-Object System.Xml.XmlNodeReader $xaml) 
$Form = [Windows.Markup.XamlReader]::Load($reader) 

#AutoFind all controls
$xaml.SelectNodes("//*[@*[contains(translate(name(.),'n','N'),'Name')]]")  | ForEach-Object { 
New-Variable  -Name $_.Name -Value $Form.FindName($_.Name) -Force 
}

#Website url
#$uri = {[system.Diagnostics.Process]::start('http://vcloud-lab.com')}
#$webSite.Add_PreviewMouseDown($uri)
$webSite.Add_MouseLeftButtonUp({[system.Diagnostics.Process]::start('http://vcloud-lab.com')})
$webSite.Add_MouseEnter({$webSite.Foreground = 'Purple'})
$webSite.Add_MouseLeave({$webSite.Foreground = 'Blue'})

$buttonSourceGroupList.Add_Click({
    Confirm-AD
    $textBoxLogs.Text = "Verifying Source User '{0}' in AD" -f $textBoxSourceUser.Text
    try 
    {
        $Global:sourceUserMemberOf = Get-AdUser $textBoxSourceUser.Text -Properties MemberOf -ErrorAction Stop
        $listBoxSourceUserGroups.ItemsSource = $sourceUserMemberOf.MemberOf | ForEach-Object {(($_ -split 'CN=') -split ',')[1]}
        $radioButtonLoadFromTxt.IsEnabled = $true
        $radioButtonTypeUser.IsEnabled = $true
        $textBoxLogs.Text = "{0}`nVerified user '{1}' exist in AD" -f $textBoxLogs.Text, $textBoxSourceUser.Text
        $buttonVerifyUserList.IsEnabled = $true
    }
    catch 
    {
        Write-Host -BackgroundColor DarkRed -ForegroundColor White $Error[0].Exception.Message
        $textBoxLogs.Text = "{0}`nProvide valid user,'{1}' doesn't exist in AD" -f $textBoxLogs.Text, $textBoxSourceUser.Text
        #Break
    }
})

$radioButtonLoadFromTxt.Add_Click({
    $textBoxDestinationUsersList.IsReadOnly = $true
    if ($radioButtonLoadFromTxt.IsChecked -eq $true) {
        $fileName = Show-FileBrowser
        $textBoxLogs.Text = "{0}`n==============================" -f $textBoxLogs.Text
        if (-not([System.String]::IsNullOrWhiteSpace($fileName))) { #[string]::IsNullOrEmpty($fileName)
            $Global:fileContents = Get-Content -Path $fileName 
            $listOfUsers = $fileContents | ForEach-Object {"`r`n$_"}
            #$textBoxDestinationUsersList.Text = $null
            $textBoxDestinationUsersList.Text = $listOfUsers[0..$listOfUsers.Length]
            $buttonVerifyUserList.IsEnabled = $true
            $textBoxLogs.Text = "{0}`nSelected file name '{1}'" -f $textBoxLogs.Text, $fileName
        }
        else {
            Write-Host 'Please select text file' -BackgroundColor DarkRed
            $textBoxLogs.Text = "{0}`nNo Text file selected" -f $textBoxLogs.Text
        }
    }
})

$radioButtonTypeUser.Add_Click({
    $textBoxDestinationUsersList.IsReadOnly = $false
    if ($radioButtonTypeUser.IsChecked -eq $true) {
        if ($textBoxDestinationUsersList.Text -eq 'Load List from txt file or Type user') { #-not([System.String]::IsNullOrWhiteSpace($fileName)) #[string]::IsNullOrEmpty($fileName)
            $textBoxDestinationUsersList.Text = $null
        }
    }
})



$buttonVerifyUserList.Add_Click({
    $Global:confirmedUserList = @()
    $textBoxLogs.Text = "{0}`n==============================" -f $textBoxLogs.Text
    if ($textBoxDestinationUsersList.Text -eq "") 
    {
        Show-MessageBox -Message 'Destination user list is empty' -Title 'Type Users' -Icon Error | Out-Null
    }
    else 
    { 
        if ($radioButtonTypeUser.IsChecked -eq $true)
        {
            $Global:userslist = $textBoxDestinationUsersList.Text -split "`n"
        }
        else 
        {
            $Global:userslist = ($textBoxDestinationUsersList.Text -split ' ').trim()
        }
        
        foreach ($user in $userslist)
        {
            try 
            {
                $textBoxLogs.Text = "{0}`nChecking user '{1}' status in AD" -f $textBoxLogs.Text, $user
                Write-Host -BackgroundColor DarkGray "Checking user '$user' status in AD..." -NoNewline
                [void](Get-ADUser $user.trim() -ErrorAction Stop)
                Write-Host -BackgroundColor DarkGreen -ForegroundColor White "...Tested user '$user' exist in AD"
                $textBoxLogs.Text = "{0}`nTested user '{1}' exist in AD" -f $textBoxLogs.Text, $user
                $buttonCopyMemberGroups.IsEnabled = $true
                $Global:confirmedUserList += $user
            }
            catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException]
            {
                Write-Host -BackgroundColor DarkRed -ForegroundColor White "...User '$user' doesn't exist in AD"
                $textBoxLogs.Text = "{0}`nUser '{1}' doesn't exist in AD" -f $textBoxLogs.Text, $user
            } #catch [Microsoft.ActiveDirectory.Management.ADIdentityNotFoundException]
            catch 
            {
                Write-Host -BackgroundColor DarkRed -ForegroundColor White "...Check your access"
                $textBoxLogs.Text = "{0}`nCheck your access on user '{1}'" -f $textBoxLogs.Text, $user
            } #catch
        } #foreach ($user in $destinationUser)
    }

    $textBoxDestinationUsersList.Text = $confirmedUserList | ForEach-Object {"`n$_"}
    $progressBar.Value = 50
})

$buttonCopyMemberGroups.Add_Click({
    $textBoxLogs.Text = "{0}`n==============================" -f $textBoxLogs.Text
    foreach ($group in $sourceUserMemberOf.MemberOf) 
    {
        try 
        {
            $Global:groupInfo = Get-AdGroup $group
            $groupName = $groupInfo.Name
            $groupInfo | Add-ADGroupMember -Members $confirmedUserList -ErrorAction Stop
            Write-Host -BackgroundColor DarkGreen "Added users to group '$groupName'"
            $textBoxLogs.Text = "{0}`nAdded users to group '{1}' " -f $textBoxLogs.Text, $groupName
        } #try

        catch
        {
            #$Error[0].Exception.GetType().fullname
            if ($null -eq $confirmedUserList[0]) {
                Write-Host -BackgroundColor DarkMagenta "Provided destination user list is invalid, Please Try again."
                $textBoxLogs.Text = "{0}`nProvided destination users list is invalid " -f $textBoxLogs.Text
                #break
            }
            Write-Host -BackgroundColor DarkMagenta $groupName - $($Error[0].Exception.Message)
            $textBoxLogs.Text = "{0}`n{1} - {2} " -f $textBoxLogs.Text, $groupName, $Error[0].Exception.Message
        } #catch
    } #foreach ($group in $sourceUserMemberOf.MemberOf)
    $progressBar.Value = 100
})

#Mandetory last line of every script to load form
[void]$Form.ShowDialog()